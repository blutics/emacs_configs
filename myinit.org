#+STARTUP: hidestars
* interface config
** theme 
#+BEGIN_SRC emacs-lisp
  (use-package challenger-deep-theme
    :ensure t)
  (use-package color-theme-modern
    :ensure t)
  (use-package base16-theme
    :ensure t)
  (use-package moe-theme
    :ensure t)
  (use-package alect-themes
    :ensure t)
  (use-package zerodark-theme
    :ensure t)

  (use-package all-the-icons
    :ensure t)

  (load-theme 'zerodark t)
  (zerodark-setup-modeline-format)

  ;;;(set-frame-parameter (selected-frame) 'alpha '(85 50))
  ;;;(add-to-list 'default-frame-alist '(alpha 85 50))
#+END_SRC

   #+RESULTS:
   
** general
#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (find-file-noselect "~/.emacs.d/myinit.org")
    (electric-pair-mode)

    (defalias 'list-buffers 'ibuffer)

    (global-linum-mode 1)
    (setq linum-format "%5d ")
    (global-hl-line-mode)

    ;;backup directory

    (set-face-attribute 'default nil :height 100)
    (set-fontset-font t 'hangul (font-spec :name "NanumGothicCoding"))

    (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
    (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "S-C-<down>") 'shrink-window)
    (global-set-key (kbd "S-C-<up>") 'enlarge-window)
    (global-set-key (kbd "C-x b") 'ibuffer)

    (global-set-key (kbd "C-x p") 'package-list-packages)

    (eval-after-load "Emacs-Lisp"
      (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer))

    (set-fontset-font "fontset-default" '(#x1100 . #xffdc) '("MunanCoding" . "iso10646-1"))
    ;;;(setq face-font-rescale-alist '((".*MunanCoding.*" . 1.1)))

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      (setq beacon-color "#666600")
      )
    (use-package paredit
      :ensure t)
  #+END_SRC

#+RESULTS:
=t
==t
=   
** ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
            '(("home"
               ("emacs-config" (or (filename . ".emacs.d")
                                   (filename . "emacs-config")))
               ("org" (or (mode . org-mode)
                          (filename . "OrgMode")))
               ("help" (or (name . "\*Help\*"))))))
      (add-hook 'ibuffer-mode-hook
                '(lambda()
                   (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

   #+RESULTS:
   | lambda | nil | (ibuffer-switch-to-saved-filter-groups home) |
** for Windows Setting
#+BEGIN_SRC emacs-lisp
  (set-language-environment "Korean")
  (prefer-coding-system 'utf-8)
#+END_SRC

#+RESULTS:

* packages
** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))

#+END_SRC

   #+RESULTS:
** neotree
#+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t)
    (setq neo-theme 'icons)
  ;;;(setq neo-theme (if window-system 'icons 'arrow))
  (global-set-key (kbd "C-x -") 'neotree-toggle)
  (setq inhibit-compacting-font-caches t)

  ;;;get rid of linum in NeoTree
  (defun my/neotree-hook (_unused)
    (linum-mode -1))
  (add-hook 'neo-after-create-hook 'my/neotree-hook)
   #+END_SRC

   #+RESULTS:
   | my/neotree-hook |
** python
#+BEGIN_SRC emacs-lisp
  ;;;(setq python-shell-interpreter "python3")
  (setq python-shell-completion-native-disabled-interpreters '("python"))     
#+END_SRC

   #+RESULTS:
   | python |

** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
               :ensure t
               :init(elpy-enable))
  (print "hello world!!!")
#+END_SRC

#+RESULTS:
: hello world!!!

** magit
#+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
#+END_SRC

   #+RESULTS:

** hydra
#+BEGIN_SRC emacs-lisp
   (use-package hydra
     :ensure t)

   (defhydra hydra-buffer-menu (:color pink
                                :hint nil)
     "
   ^Mark^             ^Unmark^           ^Actions^          ^Search
   ^^^^^^^^-----------------------------------------------------------------                        (__)
   _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch                         (oo)
   _s_: save          _U_: unmark up     _b_: bury          _I_: isearch                      /------\\/
   _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur                 / |    ||
   _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only^^    *  /\\---/\\
   _~_: modified      ^ ^                ^ ^                ^^                                 ~~   ~~
   "
     ("m" Buffer-menu-mark)
     ("u" Buffer-menu-unmark)
     ("U" Buffer-menu-backup-unmark)
     ("d" Buffer-menu-delete)
     ("D" Buffer-menu-delete-backwards)
     ("s" Buffer-menu-save)
     ("~" Buffer-menu-not-modified)
     ("x" Buffer-menu-execute)
     ("b" Buffer-menu-bury)
     ("g" revert-buffer)
     ("T" Buffer-menu-toggle-files-only)
     ("O" Buffer-menu-multi-occur :color blue)
     ("I" Buffer-menu-isearch-buffers :color blue)
     ("R" Buffer-menu-isearch-buffers-regexp :color blue)
     ("." nil "cancel")
     ("v" Buffer-menu-select "select" :color blue)
     ("o" Buffer-menu-other-window "other-window" :color blue)
     ("q" quit-window "quit" :color blue))



   (defun org-agenda-cts ()
     (and (eq major-mode 'org-agenda-mode)
          (let ((args (get-text-property
                       (min (1- (point-max)) (point))
                       'org-last-args)))
            (nth 2 args))))

   (defhydra hydra-org-agenda-view (:hint none)
     "
   _d_: ?d? day        _g_: time grid=?g?  _a_: arch-trees
   _w_: ?w? week       _[_: inactive       _A_: arch-files
   _t_: ?t? fortnight  _f_: follow=?f?     _r_: clock report=?r?
   _m_: ?m? month      _e_: entry text=?e? _D_: include diary=?D?
   _y_: ?y? year       _._: quit           _L__l__c_: log = ?l?"
     ("SPC" org-agenda-reset-view)
     ("d" org-agenda-day-view (if (eq 'day (org-agenda-cts)) "[x]" "[ ]"))
     ("w" org-agenda-week-view (if (eq 'week (org-agenda-cts)) "[x]" "[ ]"))
     ("t" org-agenda-fortnight-view (if (eq 'fortnight (org-agenda-cts)) "[x]" "[ ]"))
     ("m" org-agenda-month-view (if (eq 'month (org-agenda-cts)) "[x]" "[ ]"))
     ("y" org-agenda-year-view (if (eq 'year (org-agenda-cts)) "[x]" "[ ]"))
     ("l" org-agenda-log-mode (format "% -3S" org-agenda-show-log))
     ("L" (org-agenda-log-mode '(4)))
     ("c" (org-agenda-log-mode 'clockcheck))
     ("f" org-agenda-follow-mode (format "% -3S" org-agenda-follow-mode))
     ("a" org-agenda-archives-mode)
     ("A" (org-agenda-archives-mode 'files))
     ("r" org-agenda-clockreport-mode (format "% -3S" org-agenda-clockreport-mode))
     ("e" org-agenda-entry-text-mode (format "% -3S" org-agenda-entry-text-mode))
     ("g" org-agenda-toggle-time-grid (format "% -3S" org-agenda-use-time-grid))
     ("D" org-agenda-toggle-diary (format "% -3S" org-agenda-include-diary))
     ("!" org-agenda-toggle-deadlines)
     ("[" (let ((org-agenda-include-inactive-timestamps t))
            (org-agenda-check-type t 'timeline 'agenda)
            (org-agenda-redo)
            (message "Display now includes inactive timestamps as well")))
     ("q" (message "Abort") :exit t)
     ("." nil))

   ;; Recommended binding:


     (defhydra hydra-org-template (:color blue :hint nil)
       "
  _c_ :  center  _q_ :  quote     _e_ :  emacs-lisp    _L_ :  LaTeX:
  _l_ :  latex   _E_ :  Example   _p_ :  perl          _i_ :  index:
  _a_ :  ascii   _v_ :  verse     _P_ :  Perl tangled  _I_ :  INCLUDE:
  _s_ :  src     _n_ :  note      _u_ :  plant uml     _H_ :  HTML:
  _h_ :  html    _A_ :  ASCII:    _S_ :  seq_TODO

   "
       ("s" (hot-expand "<s"))
       ("E" (hot-expand "<e"))
       ("q" (hot-expand "<q"))
       ("v" (hot-expand "<v"))
       ("n" (hot-expand "<not"))
       ("c" (hot-expand "<c"))
       ("l" (hot-expand "<l"))
       ("h" (hot-expand "<h"))
       ("a" (hot-expand "<a"))
       ("L" (hot-expand "<L"))
       ("i" (hot-expand "<i"))
       ("e" (hot-expand "<s" "emacs-lisp"))
       ("p" (hot-expand "<s" "perl"))
       ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
       ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
       ("I" (hot-expand "<I"))
       ("H" (hot-expand "<H"))
       ("S" (hot-expand "<S"))
       ("A" (hot-expand "<A"))
       ("<" self-insert-command "ins")
       ("o" nil "quit"))

     (defun hot-expand (str &optional mod header)
       "Expand org template.

   STR is a structure template string recognised by org like <s. MOD is a
   string with additional parameters to add the begin line of the
   structure element. HEADER string includes more parameters that are
   prepended to the element after the #+HEADER: tag."
       (let (text)
         (when (region-active-p)
           (setq text (buffer-substring (region-beginning) (region-end)))
           (delete-region (region-beginning) (region-end))
           (deactivate-mark))
         (when header (insert "#+HEADER: " header) (forward-line))
         (insert str)
         (org-try-structure-completion)
         (when mod (insert mod) (forward-line))
         (when text (insert text))))

     (define-key org-mode-map "<"
       (lambda () (interactive)
         (if (or (region-active-p) (looking-back "^"))
             (hydra-org-template/body)
           (self-insert-command 1))))

     (eval-after-load "org"
       '(cl-pushnew
         '("not" "#+BEGIN_NOTES\n?\n#+END_NOTES")
         org-structure-template-alist))


   (defhydra hydra-org-clock (:color blue :hint nil)
     "
  ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
  -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
  (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
   ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
   ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
   ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
  "
     ("i" org-clock-in)
     ("c" org-clock-in-last)
     ("o" org-clock-out)
     
     ("e" org-clock-modify-effort-estimate)
     ("q" org-clock-cancel)

     ("g" org-clock-goto)
     ("d" org-clock-display)
     ("r" org-clock-report)
     ("?" (org-info "Clocking commands"))

    ("r" org-timer-start)
    ("n" org-timer-set-timer)
    ("p" org-timer-pause-or-continue)
    ("s" org-timer-stop)

    ("m" org-timer)
    ("t" org-timer-item)
    ("z" (org-info "Timers")))

#+END_SRC

   #+RESULTS:
   : hydra-learn-sp/body

** move-text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure t)
#+END_SRC

   #+RESULTS:

** ORG
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("S" "#+SEQ_TODO: "))
#+END_SRC

#+RESULTS:

* key_bindings
#+BEGIN_SRC emacs-lisp

  (with-eval-after-load 'ibuffer
    (define-key ibuffer-mode-map "." 'hydra-buffer-menu/body))
  (with-eval-after-load 'org-agenda
    (define-key org-agenda-mode-map "." 'hydra-org-agenda-view/body))
  (with-eval-after-load 'org
    (bind-key "C-c w" 'hydra-org-clock/body))

#+END_SRC

#+RESULTS:
: hydra-learn-sp

